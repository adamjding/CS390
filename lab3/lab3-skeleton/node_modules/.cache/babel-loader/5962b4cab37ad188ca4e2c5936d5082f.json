{"ast":null,"code":"var _jsxFileName = \"/Users/adamding/majorCourses/cs390/lab3/lab3-skeleton/src/components/board.js\";\nimport React, { Component } from \"react\";\nimport { Button, Table } from \"reactstrap\";\nimport Row from \"./row.js\";\nimport Tile from \"./tile.js\";\nimport { connect } from \"net\";\nconst rows = 6;\nconst cols = 7;\nconst player1 = 1;\nconst player2 = 2;\n\nconst checkElements = arr => /([12]),\\1,\\1,\\1/.test(arr.toString());\n\nlet board; //board to hold values\n\nlet currPlayer; //integer used to keep track of current player\n\nlet gameOver; //boolean used to keep track if the game is won\n\nlet lastPlacedX;\nlet lastPlacedY;\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /*\r\n      Part 1:\r\n      Add appropriate state values\r\n      */\n      board: [[]],\n      currPlayer: 1,\n      gameOver: false,\n      lastPlacedX: 0,\n      lastPlacedY: 0\n    };\n  }\n\n  createBoard() {\n    /*\r\n    Part 1:\r\n    Initialize board with null values\r\n    */\n    let newBoard = new Array(rows);\n\n    for (var i = 0; i < newBoard.length; i++) {\n      newBoard[i] = new Array(cols);\n    }\n\n    for (var i = 0; i < newBoard.length; i++) {\n      for (var j = 0; j < newBoard[i].length; j++) {\n        newBoard[i][j] = null;\n      }\n    }\n\n    this.setState({\n      board: newBoard\n    });\n  }\n\n  placeToken(col) {\n    const _this$state = this.state,\n          gameOver = _this$state.gameOver,\n          board = _this$state.board,\n          currPlayer = _this$state.currPlayer;\n    let newBoard = board;\n\n    if (!gameOver) {\n      /*\r\n      Part 3:\r\n      Place the token in the appropriate column, update the current player and update the state accordingly\r\n      */\n      //col is the x value\n      var i;\n\n      for (i = rows - 1; i >= 0; i--) {\n        if (newBoard[i][col] === null) {\n          newBoard[i][col] = currPlayer;\n          lastPlacedX = i;\n          lastPlacedY = col;\n          break;\n        }\n      }\n\n      this.setState({\n        board: newBoard,\n        currPlayer: currPlayer === 1 ? 2 : 1 // lastPlacedX: i,\n        // lastPlacedY: col,\n\n      });\n    }\n  }\n\n  checkColumns(table) {\n    return table.reduce((hasMatch, column) => hasMatch || checkElements(column), false);\n  }\n\n  checkRows(table) {\n    for (let i = 0; i < table[0].length; ++i) {\n      let rowArray = table.map(column => column[i]);\n      if (checkElements(rowArray)) return true;\n    }\n\n    return false;\n  }\n\n  checkTable(table) {\n    return this.checkRows(table) || this.checkColumns(table);\n  }\n\n  componentDidMount() {\n    this.createBoard();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const _this$state2 = this.state,\n          board = _this$state2.board,\n          gameOver = _this$state2.gameOver;\n    /*\r\n    Part 4:\r\n    End the game if a player wins \r\n    */\n\n    var count = 0;\n    let player = currPlayer;\n    var count = 0;\n    let rowCheck = board[lastPlacedX];\n\n    for (var i = 0; i < board.length; i++) {\n      if (rowCheck[i] === null) {\n        console.log('fuck off');\n      }\n    }\n  }\n\n  render() {\n    const _this$state3 = this.state,\n          board = _this$state3.board,\n          currPlayer = _this$state3.currPlayer,\n          gameOver = _this$state3.gameOver;\n    const playerColor = gameOver ? currPlayer === 1 ? \"yellow\" : \"red\" : currPlayer === 1 ? \"red\" : \"yellow\";\n    let myBoard = board.map((row, index) => React.createElement(Row, {\n      key: index,\n      row: row,\n      placeToken: this.placeToken.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"flex justify-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      className: \"btn-block\",\n      onClick: () => {\n        this.createBoard();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"New Game\")), React.createElement(\"div\", {\n      className: \"flex justify-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Table, {\n      style: {\n        marginBottom: \"0px\"\n      },\n      className: \"w-30 b--light-blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    },\n    /*\r\n     Part 2:\r\n     Map rows in board to individual Row components with the .map function.\r\n     Make sure to pass placeToken function so that the child component can call the function\r\n    */\n    React.createElement(\"div\", {\n      className: Row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, myBoard))), React.createElement(\"h2\", {\n      className: \"flex justify-center w-20 \".concat(playerColor),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, gameOver ? \"Player \".concat(currPlayer === 1 ? \"2\" : \"1\", \" Won!\") : \"Player \".concat(currPlayer, \"'s Turn!\"))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/adamding/majorCourses/cs390/lab3/lab3-skeleton/src/components/board.js"],"names":["React","Component","Button","Table","Row","Tile","connect","rows","cols","player1","player2","checkElements","arr","test","toString","board","currPlayer","gameOver","lastPlacedX","lastPlacedY","Board","constructor","props","state","createBoard","newBoard","Array","i","length","j","setState","placeToken","col","checkColumns","table","reduce","hasMatch","column","checkRows","rowArray","map","checkTable","componentDidMount","componentDidUpdate","prevProps","prevState","count","player","rowCheck","console","log","render","playerColor","myBoard","row","index","bind","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Table } from \"reactstrap\";\r\nimport Row from \"./row.js\";\r\nimport Tile from \"./tile.js\";\r\nimport { connect } from \"net\";\r\n\r\nconst rows = 6;\r\nconst cols = 7;\r\nconst player1 = 1;\r\nconst player2 = 2;\r\nconst checkElements = arr => /([12]),\\1,\\1,\\1/.test(arr.toString());\r\n\r\nlet board; //board to hold values\r\nlet currPlayer; //integer used to keep track of current player\r\nlet gameOver;  //boolean used to keep track if the game is won\r\nlet lastPlacedX;\r\nlet lastPlacedY;\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      /*\r\n      Part 1:\r\n      Add appropriate state values\r\n      */\r\n     board: [[]],\r\n     currPlayer: 1,\r\n     gameOver: false,\r\n     lastPlacedX: 0,\r\n     lastPlacedY: 0,\r\n    };\r\n  }\r\n  \r\n  createBoard() {\r\n    /*\r\n    Part 1:\r\n    Initialize board with null values\r\n    */\r\n    let newBoard = new Array(rows);\r\n    for(var i = 0; i < newBoard.length; i++) {\r\n      newBoard[i] = new Array(cols);\r\n    }\r\n\r\n    for(var i = 0; i < newBoard.length; i++) {\r\n      for(var j = 0; j < newBoard[i].length; j++) {\r\n        newBoard[i][j] = null;\r\n      } \r\n    }\r\n\r\n    this.setState({\r\n      board: newBoard,\r\n    });\r\n\r\n  }\r\n\r\n  placeToken(col) {\r\n    const { gameOver, board, currPlayer } = this.state;\r\n    let newBoard = board;\r\n    if (!gameOver) {\r\n      /*\r\n      Part 3:\r\n      Place the token in the appropriate column, update the current player and update the state accordingly\r\n      */\r\n      //col is the x value\r\n      var i;\r\n      for(i = (rows - 1); i >= 0; i--) {\r\n        if(newBoard[i][col] === null) {\r\n          newBoard[i][col] = currPlayer;\r\n          lastPlacedX = i;\r\n          lastPlacedY = col;\r\n          break;\r\n        }\r\n      }\r\n      this.setState({\r\n        board: newBoard,\r\n        currPlayer: (currPlayer === 1) ? 2 : 1,\r\n        // lastPlacedX: i,\r\n        // lastPlacedY: col,\r\n      })\r\n    }\r\n  }\r\n\r\n  checkColumns(table) {\r\n    return table.reduce(\r\n      (hasMatch, column) => hasMatch || checkElements(column),\r\n      false\r\n    );\r\n  }\r\n\r\n  checkRows(table) {\r\n    for (let i = 0; i < table[0].length; ++i) {\r\n      let rowArray = table.map(column => column[i]);\r\n      if (checkElements(rowArray)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkTable(table) {\r\n    return this.checkRows(table) || this.checkColumns(table);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.createBoard();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { board, gameOver } = this.state;\r\n    /*\r\n    Part 4:\r\n    End the game if a player wins \r\n    */\r\n    var count = 0;\r\n    let player = currPlayer;\r\n    var count = 0;\r\n    let rowCheck = board[lastPlacedX];\r\n    for(var i = 0; i < board.length; i++) {\r\n      if(rowCheck[i] === null) {\r\n        console.log('fuck off');\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { board, currPlayer, gameOver } = this.state;\r\n    const playerColor = gameOver\r\n      ? currPlayer === 1\r\n        ? \"yellow\"\r\n        : \"red\"\r\n      : currPlayer === 1\r\n      ? \"red\"\r\n      : \"yellow\";\r\n    \r\n    let myBoard = board.map((row, index) => <Row key={index} row={row} placeToken={this.placeToken.bind(this)}/>);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"flex justify-center\">\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"btn-block\"\r\n            onClick={() => {\r\n              this.createBoard();\r\n            }}\r\n          >\r\n            New Game\r\n          </Button>\r\n        </div>\r\n        <div className=\"flex justify-center\">\r\n          <Table style={{ marginBottom: \"0px\" }} className=\"w-30 b--light-blue\">\r\n            <thead></thead>\r\n            <tbody>\r\n              {/*\r\n                Part 2:\r\n                Map rows in board to individual Row components with the .map function.\r\n                Make sure to pass placeToken function so that the child component can call the function\r\n              */\r\n                <div className={Row}>\r\n                  {myBoard}\r\n                </div>\r\n             }\r\n            </tbody>\r\n          </Table>\r\n          <h2 className={`flex justify-center w-20 ${playerColor}`}>\r\n            {gameOver\r\n              ? `Player ${currPlayer === 1 ? \"2\" : \"1\"} Won!`\r\n              : `Player ${currPlayer}'s Turn!`}\r\n          </h2>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}